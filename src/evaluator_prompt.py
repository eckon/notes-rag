import textwrap
from string import Template

evaluation_prompt = Template(
    textwrap.dedent("""
        You are a helpful assistant.

        Your task is to evaluate the quality of the answer generated by the AI model.
        It does not matter if the expected answer is short and simple or long and complex.
        You just need to evaluate if the generated answer matches the expected answer, even if it is not perfect or more information is provided.
        Use your reasoning to make a decision even if the answer is not directly aligning with the expected answer.
        Some results might still be correct, I will leave that to you to decide.

        The question and answer are the following

        Question: $question
        Answer: $answer

        The AI model has generated the following answer:

        Answer to evaluate: $answer_to_evaluate


        Your task is to compare the answer generated by the AI model with the expected answer.
        The evaluation result should always be either true or false, it also needs to be the first line of the response.
        Additionally, provide a quality score from 0-100 indicating how well the generated answer matches the expected answer. Consider:
        - 0-30: Poor match, missing most key information
        - 31-60: Partial match, contains some relevant information
        - 61-80: Good match, contains most key information with minor gaps
        - 81-100: Excellent match, comprehensive and accurate

        Answer with the following format:

        Evaluation Result: <true or false>
        Quality Score: <0-100>

        Explanation: <Why you think the answer is correct or incorrect and justify the quality score>
    """).strip()
)

qa_pairs: list[tuple[str, str]] = [
    ("What is the name of the user", "Niklas Meyer"),
    ("Can you open the browser?", "Yes or any mention that the browser was opened."),
    (
        "Can you open the browser in headless mode?",
        "Yes or any mention that the browser was opened, but in headless mode.",
    ),
    (
        "Can you access the pinecone vector db for my notes?",
        "Yes or any reference that the vector db was accessed.",
    ),
    (
        "What did i do on the '2025-08-17'?",
        textwrap.dedent("""
             Tried out different password manager like doppler and 1password cli.
             Updated my python scripts to use uv as the new package manager.
             Looked into mcp integration for browser to, for example, open big dutchman food website.
             Nothing was done for work as it was on a weekend.
        """).strip(),
    ),
    (
        "I want to delete a camera for big dutchman, what do i need to consider?",
        textwrap.dedent("""
            We want to use the frontend to delete the camera, to trigger all relevant events and cleanup.
            To be able to, we need to update the database filed `automaticRegistrationPending` to `true`.
            Afterwards a user with permission can delete the camera via the frontend.
            For further information see the big dutchman documentation `User Guide for Camera Manager application`.
            Also have a look at my note `camera-manager.md`.
        """).strip(),
    ),
    (
        "What happened over the last week? Please note down each day in its own section with bullet points.",
        textwrap.dedent("""
            The content of the returned data does not really matter.
            It is only relevant if we really get only data from the last week,
            and the different tasks in there are from the last week only.
            That the data is divided into the different days and listed as bullet points.
        """).strip(),
    ),
    (
        "Give me an overview of the health insurance topic in context of my work at IU.",
        textwrap.dedent("""
            The health insurance topic handles the insurance policiy for the students at IU.
            It sends out and receives messages from the different providers
            and is required for different flows like matriculation, enrollment, etc.
            It was integrated in EPOS which handles stundent enrolment and matriculation.

            We tried many refactorings and improvements of the code as it was really fragile.
            One try was with Pexon, a consultancy that resulted in a tedious back and forth for the refactoring process.
            After the failed refactoring try, the old Developer of the original code, was used to do the latest refactoring, which worked out.

            Health insurance resulted in many repeating manual tasks that had to be done by hand.
            One of the worst was when the order of messages was broken and we had to manually
            decode different messages and correctly overwrite them to restore the correct order.

            Until the end, the data in health insurance could not be trusted, and developers
            provided a manual edit/delete/create view for users to fix the data.
        """).strip(),
    ),
]
